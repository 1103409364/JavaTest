<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
  <context:property-placeholder location="classpath:jdbc.properties"/>
  <!--声明数据源DataSource，创建数据源对象。作用是连接数据库的-->
  <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!--    !set注入给DruidDataSource 作用是连接数据库的-->
    <!--    使用属性配置文件中的数据，语法${key}-->
    <!-- set注入给DruidDataSource提供连接数据库信息 jdbc:mysql://127.0.0.1:3306/db-->
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <property name="maxActive" value="${jdbc.maxActive}"/>
  </bean>

  <!--  声明mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory-->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- set注入，把数据库连接池赋给了dataSource-->
    <property name="dataSource" ref="myDataSource"/>
    <!--声明mybatis主配置文件的位置，configLocation属性是Resource类型，spring提供的，用来读取各种配置文件
    configLocation赋值使用value指定文件的路径，使用classpath：表示文件的位置
    -->
    <property name="configLocation" value="classpath:mybatis.xml"/>
  </bean>

  <!--  创建dao对象，使用SqlSession的getMapper（Student.class）
  MapperScannerConfigurer: 内部调用getMapper()生成每个dao接口的代理对象 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 指定SqlSessionFactory对象的id-->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!--指定包名，包名是dao接口所在的包名。MapperScannerConfigurer会扫描这个包中的所有接口，
    把每个接口都执行一次getMapper()方法，得到每个dao对象。创建好的dao对象放入到spring的容器中-->
    <property name="basePackage" value="com.xxx.dao"/>
    <!--创建所有接口的dao对象，名字使用接口明的首字母小写-->
  </bean>

  <!--  声明service-->
  <bean id="studentService" class="com.xxx.service.impl.StudentServiceImpl">
    <property name="studentDao" ref="studentDao"/>
  </bean>
</beans>