<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace :命名空间
    不同的mapper映射文件使用namespace来做区分
    不同的mapper映射文件所使用的namespace不允许出现重复
-->
<mapper namespace="com.xxx.dao.StudentDao">
  <!--
      sql语句必须要写在相应的标签当中
      <insert>:在标签对中写insert开头的sql语句处理添加操作
      <update>:在标签对中写update开头的sql语句处理修改操作
      <delete>:在标签对中写delete开头的sql语句处理删除操作
      <select>:在标签对中写select开头的sql语句处理查询操作
  -->
  <!--
    查询 com.xxx.domain.Student
    parameterType：java.lang.String、String、string或者省略不写
    parameterType="java.lang.String"
  -->
  <!--在实际项目开发中，所有标签都要写id属性，
    <select>标签可以省略parameterType，resultType必填
    <insert> <update> <delete>这3个标签通常只写id属性，其他属性一概不写
     sql 这里不用问号占位
-->

  <!--sql片段
  sql片段的作用是用来代替sql语句中的代码
  如果你的mapper映射文件中的sql语句某些代码出现了大量的重复，我们可以使用sql片段来代替他们
  id: sql片 段的唯一标识， 将来找到sql片段使用id来进行定位
  实际用处是用来代替复杂的子查询
  -->
  <sql id="sqlTemp1">
    select name, age
    from t_student
  </sql>

  <select id="getById" resultType="Student">
    <include refid="sqlTemp1"/>
    where id = #{id}
  </select>
  <!-- 如果返回的是多条记录，那么resultType返回值类型，应该写为集合的泛型-->
  <select id="getAll" resultType="Student">
    select id, name, age
    from t_student
  </select>
  <!-- 返回map，查到的值被会自动封装为map，有些查询结果使用domain封装不了只能用map -->
  <select id="selectAllMap" resultType="map">
    select *
    from t_student
  </select>
  <!--  <select id="selectLike" resultType="Student">-->
  <!--    select *-->
  <!--    from t_student-->
  <!--    where name like '%${value}%'-->
  <!--  </select>  -->


  <!--  可以把%写入参数传进来可以但是不合理  最常用的是空格拼接字符串 -->
  <select id="selectLike" resultType="Student">
    select *
    from t_student
    where name like '%' #{value} '%'
  </select>

  <!--  动态sql  多个条件 + 模糊查询
   where标签必须搭配if标签使用，自动去除第一个and
   通过if判断，如果有查询条件则展现where关键字，否则不展现where关键字
 -->
  <select id="selectQuery" parameterType="Student" resultType="Student">
    select * from t_student
    <where>
      <if test="name != null and name!=''">
        name like '%' #{name} '%'
      </if>
      <if test="age != null and age!=''">
        and age > #{age}
      </if>
    </where>
  </select>
  <!--动态sql：传数组参数
    foreach标签:用来遍历传递来的数组参数
    collection:标识传递参数的类型
    array:数组
    list:集合
    item:每一次遍历出来的元素，在使用该元素的时候，需要套用在#{}中
    open:拼接循环的开始符号
    close:拼接循环的结束符号
    separator:元素与元素之间的分隔符
  -->
  <select id="selectByIdArr" resultType="Student">
    select *
    from t_student
    where id in
    <foreach collection="array" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </select>
  <!--多表联查，返回map时，key重复需要改名-->
  <select id="selectNameClass" resultType="map">
    select s.name, c.name as className
    from t_student as s
           join t_classroom as c on s.classroomId = c.id
  </select>
  <!--  返回类型使用vo -->
  <select id="selectNameClassVo" resultType="StudentAndClassroomVo">
    select s.id studentId, s.name studentName, s.age, c.id classroomId, c.name classroomName
    from t_student as s
           join t_classroom as c on s.classroomId = c.id;
  </select>
  <!--  加模糊查询-->
  <select id="selectNameClassVoQuery" resultType="StudentAndClassroomVo">
    select s.id studentId, s.name studentName, s.age, c.id classroomId, c.name classroomName
    from t_student as s
           join t_classroom as c on s.classroomId = c.id
    where s.name like '%' #{query} '%';
  </select>
  <!--插入-->
  <insert id="save">
    insert into t_student(id, name, age)
    values (#{id}, #{name}, #{age})
  </insert>
  <!--修改-->
  <update id="update">
    update t_student
    set name = #{name},
        age=#{age}
    where id = #{id}
  </update>
  <!--删除-->
  <delete id="delete">
    delete
    from t_student
    where id = #{id}
  </delete>

  <resultMap id="stuMap" type="Student">
    <!--    id标签：用来配置主键的对应关系
        result标签：用来配置普通字段对应关系

        对于t_student 表，结果一个id，两个普通字段，需要两个result标签
        property属性配置实体类中的属性名
        column配置表中的字段名
    -->
    <id property="id" column="id"/>
    <result property="name" column="fullName"/>
    <result property="age" column="age"/>
  </resultMap>
</mapper>